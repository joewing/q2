
const WIDTH = 21;
const HEIGHT = 17;
const STACK_DEPTH = ((WIDTH - 1) / 2) * ((HEIGHT - 1) / 2) * 3;

const MAZE = :(WIDTH * HEIGHT);
const STACK = :STACK_DEPTH;

# Offsets for moving.
const OFFSETS = [ 1, -1, WIDTH, -WIDTH ];

var sp;         # Stack pointer
var ptr;        # Pointer to the current maze position
var remaining;  # Number of remaining directions to try
var dir;        # Current direction

# Initialize the maze array.
fun init()
  clear();
  puts("Carving...");
  memset(MAZE + WIDTH + 1, WIDTH * (HEIGHT - 2) - 2, 1);
  memset(MAZE, WIDTH, 0);
  memset(MAZE + WIDTH * (HEIGHT - 1), WIDTH, 0);
  var i = HEIGHT - 2;
  ptr = MAZE + WIDTH;
  while @i do
    @ptr = 0;
    ptr = @ptr + WIDTH - 1;
    @ptr = 0;
    ptr = @ptr + 1;
    i = @i - 1;
  end
end

# Push a value on to the stack.
fun push(x)
  @sp = @x;
  sp = @sp + 1;
end

# Pop a value off of the stack.
fun pop()
  sp = @sp - 1;
  return @@sp;
end

# Get a new direction to try and reset the counter.
fun new_direction()
  dir = rand() & 3;
  remaining = 4;
end

# Carve the maze.
fun carve()
  sp = STACK;
  ptr = MAZE + WIDTH * 2 + 2;
  new_direction();
  while 1 do
    @ptr = 0;
    var offset = @(OFFSETS + @dir);
    var move1 = @ptr + @offset;
    var move2 = @move1 + @offset;
    if @@move1 && @@move2 then
      @move1 = 0;
      ptr = @move2;
      push(@dir);
      push(@remaining);
      push(@ptr);
      new_direction();
    else
      if @remaining then
        remaining = @remaining - 1;
        dir = (@dir + 1) & 3;
      elseif @sp > STACK then
        ptr = pop();
        remaining = pop();
        dir = pop();
      else
        break;
      end
    end
  end
  MAZE + WIDTH + 2 = 0;
  MAZE + WIDTH * (HEIGHT - 2) + WIDTH - 3 = 0;
end

# Render the maze.
# Organization is:
#   0 2 4 6
#   1 3 5 7
fun render()
  OUTPUT = 0x140;
  var base_ptr = MAZE;
  var col = 4;
  while @col do
    var ptr = @base_ptr;
    var row = 16;
    while @row do
      var temp = 0;
      var bit = 5;
      while @bit do
        temp = (@temp << 1) + @@ptr;
        ptr = @ptr + 1;
        bit = @bit - 1;
      end
      OUTPUT = @temp;
      ptr = @ptr + (WIDTH - 5);
      row = @row - 1;
    end
    base_ptr = @base_ptr + 5;
    col = @col - 1;
  end
  clear();
  puts(
    [
      0x180 + 6, 0x08, 0x0A, 0x0C, 0x0E,
      0x180 + 0x40 + 6, 0x09, 0x0B, 0x0D, 0x0F,
      0
    ]
  );
end

fun main()
  init();
  carve();
  render();
  waitkey();
end

