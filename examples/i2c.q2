
  .align

.def I2C_EN         0x800
.def I2C_SCL        0x400
.def I2C_SDA        0x200
.def i2c_zero       I2C_EN | I2C_SCL | I2C_SDA
.def i2c_zero_clk   I2C_EN | I2C_SDA
.def i2c_one        I2C_EN | I2C_SCL
.def i2c_one_clk    I2C_EN

; Send I2C start
; Take SDA low while SCL stays high.
i2c_start:
  sta   =x1
  lda   #i2c_one_clk    ; SDA=1, CLK=1
  sta   @=neg1
  lda   #i2c_zero_clk   ; SDA=0, CLK=1
  sta   @=neg1
  lda   #i2c_zero       ; SDA=0, CLK=0
  sta   @=neg1
  jmp   @=x1

; Send I2C stop
; Take SDA high while SCL stays high.
i2c_stop:
  sta   =x1
  lda   #i2c_zero       ; SDA=0, CLK=0
  sta   @=neg1
  lda   #i2c_zero_clk   ; SDA=0, CLK=1
  sta   @=neg1
  lda   #i2c_one_clk    ; SDA=1, CLK=1
  sta   @=neg1
  jmp   @=x1

; Wait for SCL to go high (clock stretching).
; Destroys x1
i2c_wait:
  sta   =x1
i2c_wait_loop:
  lda   @=neg1
  nor   #~I2C_SCL
  jfc   i2c_wait_loop
  jmp   @=x1

; Write byte in x0.
; Destroys x0-x2
i2c_write:
  sta   =x1

  ; Shift out high 4 bits
  shl   =x0
  sta   =x0   ; x2
  add   =x0
  sta   =x0   ; x4
  add   =x0
  sta   =x0   ; x8
  add   =x0
  sta   =x0   ; x16

  lea   =8
i2c_write_loop:
  add   =neg1
  sta   =x2

  lda   =x0
  add   =x0
  sta   =x0
  jfc   i2c_write_zero

  ; Write 1
  lda   #i2c_one
  sta   @=neg1
  lda   #i2c_one_clk
  sta   @=neg1
  lda   #i2c_one
  jmp   i2c_write_cont
i2c_write_zero:

  ; Write 0
  lda   #i2c_zero
  sta   @=neg1
  lda   #i2c_zero_clk
  sta   @=neg1
  lda   #i2c_zero

i2c_write_cont:
  sta   @=neg1
  lda   =x2
  jfc   i2c_write_loop

  jmp   i2c_ack

; Read a byte into x0
i2c_read:
  sta   =x1
  lea   =0
  sta   =x0

  lea   =8
i2c_read_loop:
  add   =neg1
  sta   =x2

  lda   #i2c_one
  sta   @=neg1
  lda   #i2c_one_clk
  sta   @=neg1

  lda   @=neg1
  nor   #~I2C_SDA
  lea   =0
  jfc   $+2
  lea   =1
  add   =x0
  add   =x0
  sta   =x0

  lda   #i2c_one
  sta   @=neg1

  lda   =x2
  jfc   i2c_read_loop
  ; fall through

; Acknowledge
; Leaves SDA=1, SCL=0
i2c_ack:
  lda   #i2c_one
  sta   @=neg1
  lda   #i2c_one_clk
  sta   @=neg1
  lda   #i2c_one
  sta   @=neg1
  jmp   @=x1

  .align

