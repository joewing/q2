
fun putints(signed)
  if @signed > 0x7FF then
    OUTPUT = '-';
    putint(-@signed);
  else
    OUTPUT = ' ';
    putint(@signed);
  end
end

# Turn on the heater for some number of iterations through a delay loop.
fun sht31_heat(cycles)

  i2c_start();
  i2c_write(0x88);  # Address
  i2c_write(0x30);  # Heater
  i2c_write(0x6D);  # Enable
  i2c_stop();

  while @cycles do
    cycles = @cycles - 1;
  end

  i2c_start();
  i2c_write(0x88);  # Address
  i2c_write(0x30);  # Heater
  i2c_write(0x66);  # Disable
  i2c_stop();
end

fun sht31_get_measurement(temperature, humidity)

  i2c_start();
  i2c_write(0x88);  # Address
  i2c_write(0x24);  # Clock stretching disabled
  i2c_write(0x00);  # High repeatability
  i2c_stop();

  i2c_start();
  i2c_write(0x89);              # Address
  var temp_msb = i2c_read(1);   # Temperature MSB
  var temp_lsb = i2c_read(1);   # Temperature LSB
  i2c_read(1);                  # CRC
  var hum_msb = i2c_read(1);    # Humidity MSB
  var hum_lsb = i2c_read(1);    # Humidity LSB
  i2c_read(0);
  i2c_stop();

  # We read 16 bits, so drop the lower 4.
  temp_lsb = (@temp_msb << 4) | (@temp_lsb >> 4);
  hum_lsb  = (@hum_msb  << 4) | (@hum_lsb  >> 4);

  # F = 315 * T / 65535 - 49
  mult24(315, @temp_lsb, temp_msb, temp_lsb);
  @temperature = @temp_msb - 49;

  # H = 100 * S / 65535
  mult24(100, @hum_lsb, @humidity, hum_lsb);

end

fun main()
  clear();
  puts("Temp:     xxxx F");
  OUTPUT = 0x180 + 0x40;
  puts("Humidity: xxxx %");

  var iter = 1;
  while 1 do
    var temperature, humidity;

    iter = @iter - 1;
    if @iter == 0 then
      sht31_heat(0x400);
      iter = 100;
    end

    sht31_get_measurement(temperature, humidity);

    OUTPUT = 0x180 + 9;
    putints(@temperature);
    OUTPUT = 0x180 + 0x40 + 10;
    putint(@humidity);
  end

end


