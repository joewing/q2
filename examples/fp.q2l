# Q2L floating point library.

# Format:
#   SMMMMMMMMMMM EEEEEEEEEEEE

fun puthex(v)
  const DIGITS = "0123456789ABCDEF";
  OUTPUT = @(DIGITS + (@v >> 8));
  OUTPUT = @(DIGITS + ((@v >> 4) & 15));
  OUTPUT = @(DIGITS + (@v & 15));
end

# Multiply 2 12-bit values to get a 24-bit result.
fun mult24(a, b, result)
  @result = 0;
  @result + 1 = 0;

  var bhigh = 0;
  while @a do
    a = @a >> 1;
    ifcarry
      var temp = @@result + @b;
      ifcarry
        @result + 1 = @(@result + 1) + 1;
      end
      @result = @temp;
      @result + 1 = @(@result + 1) + @bhigh;
    end
    bhigh = @bhigh << 1;
    b = @b << 1;
    ifcarry
      bhigh = @bhigh + 1;
    end
  end
end

# Extract sign, significand, and exponent.
fun fextract(ptr, sign, abs, exp)
  @sign = @@ptr & 0x800;
  @abs = @@ptr & 0x7FF;
  @exp = @(@ptr + 1);
end

# Normalize.
fun fnorm(abs, exp)
  if @@abs & 0x800 then
    @abs = @@abs >> 1;
    @exp = @@exp + 1;
  else 
    while @@abs && !(@@abs & 0x400) do
      @abs = @@abs + @@abs;
      @exp = @@exp - 1;
    end
  end
end

# Floating-point add.
fun fadd(x, y, result)

  # Extract x
  var signx;
  var absx;
  var expx;
  fextract(@x, signx, absx, expx);

  # Extract y
  var signy;
  var absy;
  var expy;
  fextract(@y, signy, absy, expy);

  # Align exponents.
  while @expx < @expy do
    expx = @expx + 1;
    absx = @absx >> 1;
  end
  while @expy < @expx do
    expy = @expy + 1;
    absy = @absy >> 1;
  end

  # Determine sign.
  var signout = @signx;
  if @absx < @absy then
    signout = @signy;
  end

  # Convert to 2s complement.
  if @signx then
    absx = -@absx;
  end
  if @signy then
    absy = -@absy;
  end

  # Add
  absx = @absx + @absy;

  # Fix sign.
  if @signout then
    absx = -@absx;
  end

  # Normalize.
  fnorm(absx, expx);

  # Set result.
  @result = @signout + @absx;
  @result + 1 = @expx;

end

# Floating-point negation.
fun fneg(x, result)
  @result = @@x ^ 0x800;
  @result + 1 = @(@x + 1);
end

# Floating-point subtract.
fun fsub(x, y, result)
  const temp = :2;
  fneg(@y, temp);
  fadd(@x, temp, @result);
end

# Floating-point multiply.
fun fmul(x, y, result)

  var absx;
  var expx;
  var signx;
  fextract(@x, signx, absx, expx);

  var absy;
  var expy;
  var signy;
  fextract(@y, signy, absy, expy);

  # Add exponents.
  expx = @expx + @expy + 0x801;

  # Fix sign.
  signx = @signx ^ @signy;

  # Multiply.
  const mout = :2;
  mult24(@absx << 1, @absy << 1, mout);
  absx = @(mout + 1);

  # Normalize.
  fnorm(absx, expx);

  @result = @signx + @absx;
  @result + 1 = @expx;

end

# Floating-point divide.
fun fdiv(x, y, result)

  var absx;
  var expx;
  var signx;
  fextract(@x, signx, absx, expx);

  var absy;
  var expy;
  var signy;
  fextract(@y, signy, absy, expy);

  # Subtract exponents.
  expx = @expx - @expy + 0x800;

  # Fix sign.
  signx = @signx ^ @signy;

  # Get numerator for division.
  var num_high = 0;
  var num_low = @absx;
  var n = 10;
  while @n do
    num_high = @num_high << 1;
    num_low = @num_low << 1;
    ifcarry
      num_high = @num_high + 1;
    end
    n = @n + -1;
  end

  # Divide.
  absx = 0;
  var rem = 0;
  n = 23;
  while @n do

    absx = @absx << 1;
    rem = @rem << 1;

    num_high = @num_high << 1;
    ifcarry
      rem = @rem + 1;
    end
    num_low = @num_low << 1;
    ifcarry
      num_high = @num_high + 1;
    end

    if @rem >= @absy then
      rem = @rem - @absy;
      absx = @absx + 1;
    end

    n = @n + -1;
  end

  # Normalize.
  fnorm(absx, expx);

  @result = @signx + @absx;
  @result + 1 = @expx;

end

# Convert floating point to ASCII.
# Returns a 10-character string with zero terminator.
fun ftoa(x)
  const result = "-xxxx.xxxx";

  var sign;
  var abs;
  var exp;
  fextract(@x, sign, abs, exp);

  if @exp > 0x809 then
    const inf = "       inf";
    if @sign then
      inf + 6 = '-';
    end
    return inf;
  elseif @exp < 0x7F5 then
    return "    0.0000";
  else
    var int;
    var frac;

    if @exp >= 0x7FF then
      # >= 1
      var shift = 10 - (@exp - 0x7FF);
      int = @abs >> @shift;
      frac = @abs << (12 - @shift);
      frac = @frac >> 4;
    else
      # < 1
      int = 0;
      frac = @abs >> (4 + 0x7FF - 2 - @exp);
    end

    # Integer part.
    var int_str = itoa(@int);
    var i = 0;
    while @i < 3 do
      if @@int_str > '0' then
        break;
      end
      int_str = @int_str + 1;
      result + @i = ' ';
      i = @i + 1;
    end
    if @sign then
      result + @i = '-';
    else
      result + @i = ' ';
    end
    while @i < 4 do
      i = @i + 1;
      result + @i = @@int_str;
      int_str = @int_str + 1;
    end

    # Fractional part.
    i = 0;
    while @i < 4 do
      frac = @frac & 0x0FF;
      frac = @frac * 10;
      result + @i + 6 = (@frac >> 8) + '0';
      i = @i + 1;
    end

    return result;
  end
end

# Convert an integer to floating-point.
fun itof(v, result)
  var signx = @v & 0x800;
  var absx = @v;
  if @signx then
    absx = -@absx;
  end
  var expx = 0x7FF + 10;
  fnorm(absx, expx);
  @result = @signx + @absx;
  @result + 1 = @expx;
end

# Output floating point value.
fun putf(v)
  puts(ftoa(@v));
end

# Floating-point square root.
fun fsqrt(x, result)
  const two = :2;
  itof(2, two);

  const s = :2;
  memcpy(s, @x, 2);
  memcpy(@result, two, 2);

  const temp = :2;
  var i = 5;
  while @i do
    fdiv(s, @result, temp);
    fadd(@result, temp, temp);
    fdiv(temp, two, @result);
    i = @i - 1;
  end
end

