
# Format:
#   SMMMMMMMMMMM EEEEEEEEEEEE

fun puthex(v)
  const DIGITS = "0123456789ABCDEF";
  OUTPUT = @(DIGITS + (@v >> 8));
  OUTPUT = @(DIGITS + ((@v >> 4) & 15));
  OUTPUT = @(DIGITS + (@v & 15));
end

fun mult24(a, b, result)
  @result = 0;
  @result + 1 = 0;

  var bhigh = 0;
  while @a do
    ifcarry @a >> 1 then
      ifcarry @@result + @b then
        @result + 1 = @(@result + 1) + 1;
      end
      @result = @@result + @b;
      @result + 1 = @(@result + 1) + @bhigh;
    end
    bhigh = @bhigh << 1;
    ifcarry @b << 1 then
      bhigh = @bhigh + 1;
    end
    b = @b << 1;
    a = @a >> 1;
  end
end

fun fextract(ptr, sign, abs, exp)
  @sign = @@ptr & 0x800;
  @abs = @@ptr & 0x7FF;
  @exp = @(@ptr + 1);
end

fun fnorm(abs, exp)
  if @@abs & 0x800 then
    @abs = @@abs >> 1;
    @exp = @@exp + 1;
  else 
    while @@abs && !(@@abs & 0x400) do
      @abs = @@abs + @@abs;
      @exp = @@exp - 1;
    end
  end
end

fun fadd(x, y, result)

  # Extract x
  var signx;
  var absx;
  var expx;
  fextract(@x, signx, absx, expx);

  # Extract y
  var signy;
  var absy;
  var expy;
  fextract(@y, signy, absy, expy);

  # Align exponents.
  while @expx < @expy do
    expx = @expx + 1;
    absx = @absx >> 1;
  end
  while @expy < @expx do
    expy = @expy + 1;
    absy = @absy >> 1;
  end

  # Determine sign.
  var signout = @signx;
  if @absx < @absy then
    signout = @signy;
  end

  # Convert to 2s complement.
  if @signx then
    absx = -@absx;
  end
  if @signy then
    absy = -@absy;
  end

  # Add
  absx = @absx + @absy;

  # Fix sign.
  if @signout then
    absx = -@absx;
  end

  # Normalize.
  fnorm(absx, expx);

  # Set result.
  @result = @signout + @absx;
  @result + 1 = @expx;

end

fun fneg(x, result)
  @result = @@x ^ 0x800;
  @result + 1 = @(@x + 1);
end

fun fsub(x, y, result)
  const temp = :2;
  fneg(@y, temp);
  fadd(@x, temp, @result);
end

fun fmul(x, y, result)

  var absx;
  var expx;
  var signx;
  fextract(@x, signx, absx, expx);

  var absy;
  var expy;
  var signy;
  fextract(@y, signy, absy, expy);

  # Add exponents.
  expx = @expx + @expy + 0x801;

  # Fix sign.
  signx = @signx ^ @signy;

  # Multiply.
  const mout = :2;
  mult24(@absx << 1, @absy << 1, mout);
  absx = @(mout + 1);

  # Normalize.
  fnorm(absx, expx);

  @result = @signx + @absx;
  @result + 1 = @expx;

end

fun fdiv(x, y, result)

  var absx;
  var expx;
  var signx;
  fextract(@x, signx, absx, expx);

  var absy;
  var expy;
  var signy;
  fextract(@y, signy, absy, expy);

  # Subtract exponents.
  expx = @expx - @expy + 0x800;

  # Fix sign.
  signx = @signx ^ @signy;

  # Divide.
  # TODO

  # Normalize.
  fnorm(absx, expx);

  @result = @signx + @absx;
  @result + 1 = @expx;

end

fun ftoa(x)
  const result = "-xxxx.xxxx";

  var sign;
  var abs;
  var exp;
  fextract(@x, sign, abs, exp);

  if @exp > 0x809 then
    const inf = "       inf";
    if @sign then
      inf + 6 = '-';
    end
    return inf;
  elseif @exp < 0x7F5 then
    return "    0.0000";
  else
    var int;
    var frac;

    if @exp >= 0x7FF then
      # >= 1
      var shift = 10 - (@exp - 0x7FF);
      int = @abs >> @shift;
      frac = @abs << (12 - @shift);
      frac = @frac >> 4;
    else
      # < 1
      int = 0;
      frac = @abs >> (4 + 0x7FF - 2 - @exp);
    end

    # Integer part.
    var int_str = itoa(@int);
    var i = 0;
    while @i < 3 do
      if @@int_str > '0' then
        break;
      end
      int_str = @int_str + 1;
      result + @i = ' ';
      i = @i + 1;
    end
    if @sign then
      result + @i = '-';
    else
      result + @i = ' ';
    end
    while @i < 4 do
      i = @i + 1;
      result + @i = @@int_str;
      int_str = @int_str + 1;
    end

    # Fractional part.
    i = 0;
    while @i < 4 do
      frac = @frac & 0x0FF;
      frac = @frac * 10;
      result + @i + 6 = (@frac >> 8) + '0';
      i = @i + 1;
    end

    return result;
  end
end

fun putf(v)
  puts(ftoa(@v));
end

fun main()


#  var x = [0x400, 0x7FC];
#  var y = [0x640, 0x806];
# 0.125 [400 7fc] + 200 [640 806] = 200.125 [641 806]

  var x = [0x500, 0x7FF];
  var y = [0x500, 0x800];
# 1.25 [500 7ff] + 2.5 [500 800] = 3.75 [780 800]

#  var x = [0x540, 0x801];
#  var y = [0xc40, 0x802];
# 5.25 [540 801] + -8.5 [c40 802] = -3.25 [e80 800]

while 1 do
    OUTPUT = 0x180;
#    puthex(@@x);
#    OUTPUT = ' ';
#    puthex(@(@x + 1));
#    OUTPUT = '+';
#    puthex(@@y);
#    OUTPUT = ' ';
#    puthex(@(@y + 1));
#    putf(@x);

# 3.125
    OUTPUT = 0x180 + 0x40;
    fmul(@x, @y, @x);
    fadd(@x, @y, @x);
    putf(@x);

end

end
